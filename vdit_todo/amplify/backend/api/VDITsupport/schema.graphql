interface Event {
  id: ID!
  name: String!
  venue: Venue
}

type Query {
  findEventsAtVenue(venueId: ID!): [Event]
}

# ----------------------

type Venue
  @model
  @auth(
    rules: [
      { allow: public, operations: [read] }
      { allow: private, operations: [create, read, update] }
      { allow: owner }
    ]
  ) {
  id: ID!
  name: String
  address: String
}

type Concert implements Event
  @model
  @auth(
    rules: [
      { allow: public, operations: [read] }
      { allow: private, operations: [create, read, update] }
      { allow: owner }
    ]
  ) {
  id: ID!
  name: String!
  venue: Venue @hasOne
  performingBand: String
}

type Festival implements Event
  @model
  @auth(
    rules: [
      { allow: public, operations: [read] }
      { allow: private, operations: [create, read, update] }
      { allow: owner }
    ]
  ) {
  id: ID!
  name: String!
  venue: Venue @hasOne
  performers: [String]
}

type Conference implements Event
  @model
  @auth(
    rules: [
      { allow: public, operations: [read] }
      { allow: private, operations: [create, read, update] }
      { allow: owner }
    ]
  ) {
  id: ID!
  name: String!
  venue: Venue @hasOne
  speakers: [String]
  workshops: [String]
}
